{
  "swagger": "2.0",
  "info": {
    "version": "1.0.0",
    "title": "rentacar-api",
    "description": "Rent a car backed api!",
    "termsOfService": "https://www.ibrsec.com",
    "license": {
      "name": "ISC"
    },
    "contact": {
      "name": "ibrsec",
      "email": "ibr.seckin@gmail.com"
    }
  },
  "host": "localhost:8000",
  "basePath": "/",
  "schemes": [
    "http",
    "https"
  ],
  "securityDefinitions": {
    "Token": {
      "type": "apiKey",
      "in": "header",
      "name": "Authorization",
      "description": " Simple token authentication *  example: <b>Token ...tokenkey...</b>"
    },
    "Bearer": {
      "type": "apiKey",
      "in": "header",
      "name": "Authorization",
      "description": "Jwt token authentication *  example : <b>Bearer ...jwt tokenkey...</b>"
    }
  },
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/users/": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "List Users",
        "description": "  Permission: <b>Loginned user</b></br> - user can access own user only</br> - admin can access all users</br></br>  Token endpoint is hidden </br></br>  You can send query with endpoint for filter[],search[], sort[], page and limit.  <ul> Examples:   <li>URL/?<b>filter[field1]=value1&filter[field2]=value2</b></li>   <li>URL/?<b>search[field1]=value1&search[field2]=value2</b></li>   <li>URL/?<b>sort[field1]=1&sort[field2]=-1</b></li>   <li>URL/?<b>page=2&limit=1</b></li>  </ul>    ",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Create new user",
        "description": "Create a new user!!   </br> - Password type Rules- [lenght:8-16, at least: 1 upper, 1 lower, 1 number, 1 special[@$!%*?&]]\"   </br> - Just an Admin can create admin, staff or inActive users",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "username": {
                  "type": "string",
                  "example": "testuser"
                },
                "email": {
                  "type": "string",
                  "example": "test@test.com"
                },
                "password": {
                  "type": "string",
                  "example": "Password1?"
                },
                "firstName": {
                  "type": "string",
                  "example": "firstname"
                },
                "lastName": {
                  "type": "string",
                  "example": "lastname"
                },
                "isActive": {
                  "type": "string",
                  "example": "true"
                },
                "isStaff": {
                  "type": "string",
                  "example": "false"
                },
                "isAdmin": {
                  "type": "string",
                  "example": "false"
                }
              },
              "required": [
                "username",
                "email",
                "password"
              ]
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Added a new user...",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "boolean",
                  "example": false
                },
                "message": {
                  "type": "string",
                  "example": "User is created!"
                },
                "result": {
                  "$ref": "#/definitions/User"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "400": {
            "description": "Bad Request - username,email and password fields are required!",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/users/{id}": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get a user",
        "description": " Permission: <b>Loginned user</b></br> - user can access own user only</br> - admin can access all users</br></br>Get a user by id!!",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Added a new user...",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/User"
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "400": {
            "description": "Bad Request invalid id...",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "User not found!",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "tags": [
          "Users"
        ],
        "summary": "Update a user",
        "description": "Permission: <b>Admin or Staff user</b></br>- Staff users cant change admin status of a user!</br></br>Update a user by id!!",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "username": {
                  "type": "string",
                  "example": "testuser"
                },
                "email": {
                  "type": "string",
                  "example": "test@test.com"
                },
                "password": {
                  "type": "string",
                  "example": "Password1?"
                },
                "firstName": {
                  "type": "string",
                  "example": "firstname"
                },
                "lastName": {
                  "type": "string",
                  "example": "lastname"
                },
                "isActive": {
                  "type": "string",
                  "example": "true"
                },
                "isStaff": {
                  "type": "string",
                  "example": "false"
                },
                "isAdmin": {
                  "type": "string",
                  "example": "false"
                }
              },
              "required": [
                "username",
                "email",
                "password"
              ]
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Update is successfull!",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "boolean",
                  "example": false
                },
                "message": {
                  "type": "string",
                  "example": "User is  !"
                },
                "result": {
                  "$ref": "#/definitions/User"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "400": {
            "description": "Bad Request - username,email and password fields are required!",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "User not found!",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Something went wrong - user found on db but it couldn't be updated!",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Users"
        ],
        "summary": "Delete a user",
        "description": "Permission: <b>Admin user</b></br></br>Delete a user by id!",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "User is deleted successfully!"
          },
          "400": {
            "description": "Bad Request - invalid id!",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "User not found!",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Something went wrong - user found on db but it couldn't be updated!",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Users"
        ],
        "summary": "Partially Update a user",
        "description": "Permission: <b>Admin or Staff user</b></br>- Staff users cant change admin status of a user!</br</br>Partially Update a user by id!! Provide at least one field!",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "username": {
                  "type": "string",
                  "example": "testuser"
                },
                "email": {
                  "type": "string",
                  "example": "test@test.com"
                },
                "password": {
                  "type": "string",
                  "example": "Password1?"
                },
                "firstName": {
                  "type": "string",
                  "example": "firstname"
                },
                "lastName": {
                  "type": "string",
                  "example": "lastname"
                },
                "isActive": {
                  "type": "string",
                  "example": "true"
                },
                "isStaff": {
                  "type": "string",
                  "example": "false"
                },
                "isAdmin": {
                  "type": "string",
                  "example": "false"
                }
              }
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Partially update is successfull!",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "boolean",
                  "example": false
                },
                "message": {
                  "type": "string",
                  "example": "User is partially updated!"
                },
                "result": {
                  "$ref": "#/definitions/User"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "400": {
            "description": "Bad Request - at least one field is required!",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "User not found!",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Something went wrong - user found on db but it couldn't be updated!",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/cars/": {
      "get": {
        "tags": [
          "Cars"
        ],
        "summary": "List Cars",
        "description": "  Permission: <b>No Permission</b></br></br>  list the avaliable cars on selected dates -></br>  - query params: ...url?startDate=2024-10-11&endDate=2024-10-20  </br></br>  You can send query with endpoint for filter[],search[], sort[], page and limit.  <ul> Examples:   <li>URL/?<b>filter[field1]=value1&filter[field2]=value2</b></li>   <li>URL/?<b>search[field1]=value1&search[field2]=value2</b></li>   <li>URL/?<b>sort[field1]=1&sort[field2]=-1</b></li>   <li>URL/?<b>page=2&limit=1</b></li>  </ul>    ",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          },
          {
            "name": "startDate",
            "in": "query",
            "type": "string"
          },
          {
            "name": "endDate",
            "in": "query",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "post": {
        "tags": [
          "Cars"
        ],
        "summary": "Create new car",
        "description": "Permission: <b>Admin or Staff user</b></br></br>Create a new car!!</br>- year must be between min 2000 to max current year",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "plateNumber": {
                  "type": "string",
                  "example": "10ua4345"
                },
                "brand": {
                  "type": "string",
                  "example": "Toyota"
                },
                "model": {
                  "type": "string",
                  "example": "Corolla"
                },
                "year": {
                  "type": "number",
                  "example": 2020
                },
                "pricePerDay": {
                  "type": "number",
                  "example": 200
                },
                "isAvaliable": {
                  "type": "boolean",
                  "example": true
                },
                "images": {
                  "type": "array",
                  "example": [
                    "img1",
                    "img2"
                  ],
                  "items": {
                    "type": "string"
                  }
                },
                "isAutomatic": {
                  "type": "boolean",
                  "example": false
                }
              },
              "required": [
                "plateNumber",
                "brand",
                "model",
                "year",
                "pricePerDay"
              ]
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Added a new car...",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "boolean",
                  "example": false
                },
                "message": {
                  "type": "string",
                  "example": "Car is  !"
                },
                "result": {
                  "$ref": "#/definitions/Car"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "400": {
            "description": "Bad Request </br>- plateNumber, brand, model, year, pricePerDay, createdId, updatedId fields are required! </br>- Invalid  , updatedId type (object id)!",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "createdId or updatedId not found on Users!",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/cars/{id}": {
      "get": {
        "tags": [
          "Cars"
        ],
        "summary": "Get a car",
        "description": "Permission: <b>No Permission</b></br></br>Get a car by id!!",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Added a new car...",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Car"
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "400": {
            "description": "Bad Request invalid id",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Car not found!",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "tags": [
          "Cars"
        ],
        "summary": "Update a car",
        "description": "Permission: <b>Admin or Staff user</b></br></br>Update a car by id!!",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "plateNumber": {
                  "type": "string",
                  "example": "10ua4345"
                },
                "brand": {
                  "type": "string",
                  "example": "Toyota"
                },
                "model": {
                  "type": "string",
                  "example": "Corolla"
                },
                "year": {
                  "type": "number",
                  "example": 2020
                },
                "pricePerDay": {
                  "type": "number",
                  "example": 200
                },
                "isAvaliable": {
                  "type": "boolean",
                  "example": true
                },
                "images": {
                  "type": "array",
                  "example": [
                    "img1",
                    "img2"
                  ],
                  "items": {
                    "type": "string"
                  }
                },
                "isAutomatic": {
                  "type": "boolean",
                  "example": false
                }
              },
              "required": [
                "plateNumber",
                "brand",
                "model",
                "year",
                "pricePerDay"
              ]
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Update is successfull!",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "boolean",
                  "example": false
                },
                "message": {
                  "type": "string",
                  "example": "Car is  !"
                },
                "result": {
                  "$ref": "#/definitions/Car"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "400": {
            "description": "Bad Request </br>- plateNumber, brand, model, year, pricePerDay, updatedId fields are required! </br>- Invalid id, updatedId type (object id)!",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found</br>- createdId or   not found on Users!</br>- Car not found!",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Something went wrong - car found on db but it couldn't be updated!",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Cars"
        ],
        "summary": "Delete a car",
        "description": "Permission: <b>Admin user</b></br></br>Delete a car by id!",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Car is deleted successfully!"
          },
          "400": {
            "description": "Bad Request - invalid id type!",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Car not found!",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Something went wrong - car found on db but it couldn't be updated!",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Cars"
        ],
        "summary": "Partially Update a car",
        "description": "Permission: <b>Admin or Staff user</b></br></br>Partially Update a car by id!! Provide at least one field!",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "plateNumber": {
                  "type": "string",
                  "example": "10ua4345"
                },
                "brand": {
                  "type": "string",
                  "example": "Toyota"
                },
                "model": {
                  "type": "string",
                  "example": "Corolla"
                },
                "year": {
                  "type": "number",
                  "example": 2020
                },
                "pricePerDay": {
                  "type": "number",
                  "example": 200
                },
                "isAvaliable": {
                  "type": "boolean",
                  "example": true
                },
                "images": {
                  "type": "array",
                  "example": [
                    "img1",
                    "img2"
                  ],
                  "items": {
                    "type": "string"
                  }
                },
                "isAutomatic": {
                  "type": "boolean",
                  "example": false
                }
              }
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Partially update is successfull!",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "boolean",
                  "example": false
                },
                "message": {
                  "type": "string",
                  "example": "Car is partially updated!"
                },
                "result": {
                  "$ref": "#/definitions/Car"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "400": {
            "description": "Bad Request </br>- At least on field is required! - plateNumber, brand, model, year, isAutomatic, pricePerDay, updatedId! </br>- Invalid id, updatedId type (object id)!",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found</br>- createdId or updatedId not found on Users!</br>- Car not found!",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Something went wrong - car found on db but it couldn't be updated!",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/reservations/": {
      "get": {
        "tags": [
          "Reservations"
        ],
        "summary": "List Reservations",
        "description": "Permission: <b>Normal User</b></br></br>- Admin can list all reservation records!</br>- normal users can't list others' reservation records  You can send query with endpoint for filter[],search[], sort[], page and limit.  <ul> Examples:   <li>URL/?<b>filter[field1]=value1&filter[field2]=value2</b></li>   <li>URL/?<b>search[field1]=value1&search[field2]=value2</b></li>   <li>URL/?<b>sort[field1]=1&sort[field2]=-1</b></li>   <li>URL/?<b>page=2&limit=1</b></li>  </ul>    ",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "post": {
        "tags": [
          "Reservations"
        ],
        "summary": "Create new reservation",
        "description": "Permission: <b>Normal user</b></br></br>Create a new reservation!!</br>Customers;</br>- can select start and end date and see the list of available cars on selected dates.</br>- can not reserve cars which are reserved by other customers on selected time period.</br>- can choose a car on the list and reserve that car, but can not reserve more than one car on a selected time period,</br>- can see the list of their reservations including past ones.</br>- can list, create, read their reservations.</br>- can not update, delete reservations.</br>- amount is calculated automaticly (pricePerDay * (endData - startDate))</br></br>- Admin can create reservation for himself or other users. if admin sends a userId reservation will be   for that user, or else reservation will be   for the admin himself.</br>- normal users can create a reservation for just himselves.",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "carId": {
                  "type": "string",
                  "example": "56b1erfehe90856633456786"
                },
                "startDate": {
                  "type": "string",
                  "example": "2024-08-26"
                },
                "endDate": {
                  "type": "string",
                  "example": "2024-08-28"
                }
              },
              "required": [
                "carId",
                "startDate",
                "endDate"
              ]
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Added a new reservation...",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "boolean",
                  "example": false
                },
                "message": {
                  "type": "string",
                  "example": "Reservation is  !"
                },
                "result": {
                  "$ref": "#/definitions/Reservation"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "400": {
            "description": "Bad Request </br>- carId, startDate, endDate fields are required! </br>- Invalid id, carId, userid type (object id)!</br>- Start date cant be less than current date!</br>- Start date cant be less than or equal to end date!</br>- Selected car is not avaliable! for renting!</br>- A reservation is exist on same dates for the user! - Choose another date!</br>- Selected car is not avaliable on selected dates! - Choose another car!! (returns avaliable Cars on asked dates)</br>",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found: </br>- userId not found on Users!</br>- carId not found on Users!</br>- createdId not found on Users!</br>- updatedId not found on Users!</br>",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/reservations/{id}": {
      "get": {
        "tags": [
          "Reservations"
        ],
        "summary": "Get a reservation",
        "description": "Permission: <b>Normal user</b></br></br>Get a reservation by id!!</br></br>- Admin can list all reservation records!</br>- normal users can't list others' reservation records",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Added a new reservation...",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Reservation"
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "400": {
            "description": "Bad Request</br>- invalid id</br>-User can just see the own reservations! for listing other reservations, you must be a admin or staff user!",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Reservation not found!",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "tags": [
          "Reservations"
        ],
        "summary": "Update a reservation",
        "description": "Permission: <b>Admin or Staff user</b></br></br>Update a reservation by id!!",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "userId": {
                  "type": "string",
                  "example": "56b1erfehe90856633456786"
                },
                "carId": {
                  "type": "string",
                  "example": "56b1erfehe90856633456786"
                },
                "startDate": {
                  "type": "string",
                  "example": "2024-08-26"
                },
                "endDate": {
                  "type": "string",
                  "example": "2024-08-28"
                }
              },
              "required": [
                "userId",
                "carId",
                "startDate",
                "endDate"
              ]
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Update is successfull!",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "boolean",
                  "example": false
                },
                "message": {
                  "type": "string",
                  "example": "Reservation is  !"
                },
                "result": {
                  "$ref": "#/definitions/Reservation"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "400": {
            "description": "Bad Request </br>- userId, carId, startDate, endDate fields are required! </br>- Invalid id, carId, userid type (object id)!</br>- Start date cant be less than current date!</br>- Start date cant be less than or equal to end date!</br>- Selected car is not avaliable! for renting!</br>- Selected car is not avaliable on selected dates! - Choose another car!! (returns avaliable Cars on asked dates)",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found</br>- Reservation not found!</br>- userId not found on Users!</br>carId not found on Users!</br>- createdId or   not found on Users!",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Something went wrong - reservation found on db but it couldn't be updated!",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Reservations"
        ],
        "summary": "Delete a reservation",
        "description": "Permission: <b>Admin user</b></br></br>Delete a reservation by id!",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Reservation is deleted successfully!"
          },
          "400": {
            "description": "Bad Request - invalid id type!",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Reservation not found!",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Something went wrong - reservation found on db but it couldn't be updated!",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/auth/login": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Login",
        "description": "Login with email/username and password!",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "username": {
                  "type": "string",
                  "example": "testuser"
                },
                "email": {
                  "type": "string",
                  "example": "test@test.com"
                },
                "password": {
                  "type": "string",
                  "example": "Password1?"
                }
              },
              "required": [
                "username",
                "email",
                "password"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Login is OK!",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "boolean",
                  "example": false
                },
                "message": {
                  "type": "string",
                  "example": "Login is OK!"
                },
                "result": {
                  "type": "object",
                  "properties": {
                    "token": {
                      "type": "string",
                      "example": "<tokenKey>"
                    },
                    "bearer": {
                      "type": "object",
                      "properties": {
                        "accessToken": {
                          "type": "string",
                          "example": "<access token>"
                        },
                        "refreshToken": {
                          "type": "string",
                          "example": "<refresh token>"
                        }
                      }
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "400": {
            "description": "Bad request:  </br>- Email/username and password is required for login!  </br>- Invalid Email type - __@__.__  </br>- Invalid password type - rRules- [lenght:8-16, at least: 1 upper, 1 lower, 1 number, 1 special[@$!%*?&]]      "
          },
          "401": {
            "description": "Unauthorized:</br> - User not found!</br>- Invalid Password!"
          }
        }
      }
    },
    "/auth/refresh": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Refresh token",
        "description": "Refresh the access token with a refresh token (bearer. )!",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "bearer": {
                  "type": "object",
                  "properties": {
                    "": {
                      "type": "string",
                      "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiI2NmIyMmJk....."
                    }
                  },
                  "required": [
                    ""
                  ]
                }
              },
              "required": [
                "bearer"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Refresh is OK!",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "boolean",
                  "example": false
                },
                "message": {
                  "type": "string",
                  "example": "Refresh is OK!"
                },
                "result": {
                  "type": "object",
                  "properties": {
                    "bearer": {
                      "type": "object",
                      "properties": {
                        "accessToken": {
                          "type": "string",
                          "example": "<access token>"
                        }
                      }
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "400": {
            "description": "Bad request:  </br>- bearer.refreshToken is required!       "
          },
          "401": {
            "description": "Unauthorized:   </br> - User not found!   </br>- Invalid Password!"
          }
        }
      }
    },
    "/auth/logout": {
      "get": {
        "tags": [
          "Authentication"
        ],
        "summary": "Logout",
        "description": "Logout with or without token!",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          },
          {
            "name": "Authorization",
            "in": "header",
            "example": "Token <...tokenkey>",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Refresh is OK!",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "boolean",
                  "example": false
                },
                "message": {
                  "type": "string",
                  "example": "Logout is OK!"
                },
                "result": {
                  "type": "object",
                  "properties": {
                    "tokenDeleted": {
                      "type": "number",
                      "example": 1
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        }
      }
    }
  },
  "definitions": {
    "User": {
      "type": "object",
      "properties": {
        "username": {
          "type": "object",
          "properties": {
            "type": {
              "type": "function"
            },
            "trim": {
              "type": "boolean",
              "example": true
            },
            "required": {
              "type": "boolean",
              "example": true
            },
            "unique": {
              "type": "boolean",
              "example": true
            }
          }
        },
        "email": {
          "type": "object",
          "properties": {
            "type": {
              "type": "function"
            },
            "trim": {
              "type": "boolean",
              "example": true
            },
            "required": {
              "type": "boolean",
              "example": true
            },
            "unique": {
              "type": "boolean",
              "example": true
            },
            "validate": {
              "type": "array",
              "example": [
                null,
                "Invalid email type! - __@__.__"
              ],
              "items": {
                "type": "string"
              }
            }
          }
        },
        "password": {
          "type": "object",
          "properties": {
            "type": {
              "type": "function"
            },
            "trim": {
              "type": "boolean",
              "example": true
            },
            "required": {
              "type": "boolean",
              "example": true
            },
            "set": {
              "type": "function"
            },
            "validate": {
              "type": "function"
            }
          }
        },
        "firstName": {
          "type": "object",
          "properties": {
            "type": {
              "type": "function"
            },
            "trim": {
              "type": "boolean",
              "example": true
            }
          }
        },
        "lastName": {
          "type": "object",
          "properties": {
            "type": {
              "type": "function"
            },
            "trim": {
              "type": "boolean",
              "example": true
            }
          }
        },
        "isActive": {
          "type": "object",
          "properties": {
            "type": {
              "type": "function"
            },
            "default": {
              "type": "boolean",
              "example": true
            }
          }
        },
        "isAdmin": {
          "type": "object",
          "properties": {
            "type": {
              "type": "function"
            },
            "default": {
              "type": "boolean",
              "example": false
            }
          }
        },
        "isStaff": {
          "type": "object",
          "properties": {
            "type": {
              "type": "function"
            },
            "default": {
              "type": "boolean",
              "example": false
            }
          }
        }
      }
    },
    "Token": {
      "type": "object",
      "properties": {
        "userId": {
          "type": "object",
          "properties": {
            "type": {
              "type": "function"
            },
            "ref": {
              "type": "string",
              "example": "User"
            },
            "required": {
              "type": "boolean",
              "example": true
            },
            "unique": {
              "type": "boolean",
              "example": true
            },
            "index": {
              "type": "boolean",
              "example": true
            }
          }
        },
        "token": {
          "type": "object",
          "properties": {
            "type": {
              "type": "function"
            },
            "trim": {
              "type": "boolean",
              "example": true
            },
            "required": {
              "type": "boolean",
              "example": true
            },
            "unique": {
              "type": "boolean",
              "example": true
            },
            "index": {
              "type": "boolean",
              "example": true
            }
          }
        }
      }
    },
    "Car": {
      "type": "object",
      "properties": {
        "plateNumber": {
          "type": "object",
          "properties": {
            "type": {
              "type": "function"
            },
            "trim": {
              "type": "boolean",
              "example": true
            },
            "required": {
              "type": "boolean",
              "example": true
            },
            "unique": {
              "type": "boolean",
              "example": true
            }
          }
        },
        "brand": {
          "type": "object",
          "properties": {
            "type": {
              "type": "function"
            },
            "trim": {
              "type": "boolean",
              "example": true
            },
            "required": {
              "type": "boolean",
              "example": true
            }
          }
        },
        "model": {
          "type": "object",
          "properties": {
            "type": {
              "type": "function"
            },
            "trim": {
              "type": "boolean",
              "example": true
            },
            "required": {
              "type": "boolean",
              "example": true
            }
          }
        },
        "year": {
          "type": "object",
          "properties": {
            "type": {
              "type": "function"
            },
            "required": {
              "type": "boolean",
              "example": true
            },
            "min": {
              "type": "number",
              "example": 2000
            },
            "max": {
              "type": "number",
              "example": 2024
            }
          }
        },
        "isAutomatic": {
          "type": "object",
          "properties": {
            "type": {
              "type": "function"
            },
            "default": {
              "type": "boolean",
              "example": false
            }
          }
        },
        "pricePerDay": {
          "type": "object",
          "properties": {
            "type": {
              "type": "function"
            },
            "required": {
              "type": "boolean",
              "example": true
            }
          }
        },
        "images": {
          "type": "object",
          "properties": {
            "type": {
              "type": "array",
              "example": [
                null
              ],
              "items": {
                "type": "function"
              }
            },
            "default": {
              "type": "array",
              "example": [],
              "items": {}
            }
          }
        },
        "isAvaliable": {
          "type": "object",
          "properties": {
            "type": {
              "type": "function"
            },
            "default": {
              "type": "boolean",
              "example": true
            }
          }
        },
        "createdId": {
          "type": "object",
          "properties": {
            "type": {
              "type": "function"
            },
            "ref": {
              "type": "string",
              "example": "User"
            },
            "required": {
              "type": "boolean",
              "example": true
            }
          }
        },
        "updatedId": {
          "type": "object",
          "properties": {
            "type": {
              "type": "function"
            },
            "ref": {
              "type": "string",
              "example": "User"
            },
            "required": {
              "type": "boolean",
              "example": true
            }
          }
        }
      }
    },
    "Reservation": {
      "type": "object",
      "properties": {
        "userId": {
          "type": "object",
          "properties": {
            "type": {
              "type": "function"
            },
            "ref": {
              "type": "string",
              "example": "User"
            },
            "required": {
              "type": "boolean",
              "example": true
            }
          }
        },
        "carId": {
          "type": "object",
          "properties": {
            "type": {
              "type": "function"
            },
            "ref": {
              "type": "string",
              "example": "Car"
            },
            "required": {
              "type": "boolean",
              "example": true
            }
          }
        },
        "startDate": {
          "type": "object",
          "properties": {
            "type": {
              "type": "function"
            },
            "required": {
              "type": "boolean",
              "example": true
            }
          }
        },
        "endDate": {
          "type": "object",
          "properties": {
            "type": {
              "type": "function"
            },
            "required": {
              "type": "boolean",
              "example": true
            }
          }
        },
        "amount": {
          "type": "object",
          "properties": {
            "type": {
              "type": "function"
            },
            "required": {
              "type": "boolean",
              "example": true
            }
          }
        },
        "createdId": {
          "type": "object",
          "properties": {
            "type": {
              "type": "function"
            },
            "ref": {
              "type": "string",
              "example": "User"
            },
            "required": {
              "type": "boolean",
              "example": true
            }
          }
        },
        "updatedId": {
          "type": "object",
          "properties": {
            "type": {
              "type": "function"
            },
            "ref": {
              "type": "string",
              "example": "User"
            },
            "required": {
              "type": "boolean",
              "example": true
            }
          }
        }
      }
    },
    "Error": {
      "type": "object",
      "properties": {
        "error": {
          "type": "string",
          "example": "true"
        },
        "message": {
          "type": "string",
          "example": "error message"
        },
        "body": {
          "type": "string",
          "example": "error body"
        },
        "stack": {
          "type": "string",
          "example": "errorstack info"
        }
      }
    }
  },
  "security": [
    {
      "Token": []
    },
    {
      "Bearer": []
    }
  ]
}